<?php
/**
 * Created by PhpStorm.
 * User: nbin
 * Date: 7/26/18
 * Time: 1:25 PM
 */

namespace App\Data\Models;


use App\Data\Traits\AttachableTrait;
use Cviebrock\EloquentSluggable\Sluggable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class Post extends Model
{

    use Sluggable,SoftDeletes,AttachableTrait;
    protected $fillable = [
        'title',
        'slug',
        'author_id',
        'author_name',
        'category_id',
        'category_title',
        'meta_title',
        'meta_keywords',
        'meta_description',
        'body',
        'excerpt',
        'publish_types',
        'publish',
        'footer_image',
        'tags'
    ];

    public static function boot()
    {
        static::saving(function ($model){
            $model->author_id = Auth::user()->id;
            $model->author_name = $model->author->name;
            $model->category_title = $model->category->title;
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }

    protected $casts = [
        'publish_types' => 'array',
        'tags'=>'array'
    ];

    public function sluggable(): array
    {
        return [
            'slug'=>[
                'source'=>'title'
            ]
        ];
    }

    public function footerImage()
    {
        return $this->morphOne(Attachment::class,'attachable')->where('media_type','footer_image');
    }

    public function author()
    {
        return $this->belongsTo(User::class,'author_id');
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function scopePublished($query)
    {
        return $query->where('publish',1);
    }
    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphOne
     */
    public function coverImage()
    {
        return $this->morphOne(Attachment::class,'attachable')->where('media_type','cover');
    }

    public function scopeLatest($query)
    {
        return $query->orderBy('id','DESC');
    }

    public function scopeHomeFeatured($query)
    {
        return $query->where('publish_types','like','%Home%')->orWhere('publish_types','like','%Home Featured%');
    }

    public function scopeFeatured($query)
    {
        return $query->where('publish_types','like','%Featured%');
    }
    public function scopeRecent($query)
    {
        return $query->where('publish_types','like','%Recent%');
    }
}