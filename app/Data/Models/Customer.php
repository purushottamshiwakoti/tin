<?php
/**
 * Created by PhpStorm.
 * User: nbin
 * Date: 7/10/18
 * Time: 3:46 PM
 */

namespace App\Data\Models;

use App\Data\Traits\AttachableTrait;
use App\Data\Traits\ListableRepoTrait;
use App\Services\Website\Notifications\CustomerPasswordReset;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;

class Customer extends Authenticatable
{

    use Notifiable,AttachableTrait,SoftDeletes;


    /**
     * @var array
     */
    protected $fillable = [
        'first_name',
        'middle_name',
        'last_name',
        'email',
        'password',
        'date_of_birth',
        'nationality',
        'gender',
        'address',
        'mobile_number',
        'state',
        'zip_code',
        'country',
        'full_name',
        'image'
    ];

    public $indexColumns = [
        'first_name',
        'last_name',
        'email',
        'nationality',


    ];

    public $settingOptions = [
        'showActions'=>true,
        'editable'=>false,
        'deletable'=>true,
        'readable'=>true
    ];

    protected $table = 'customers';

    /**
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public static function boot()
    {
        static::saving(function($model){
            if(Hash::needsRehash($model->password)){
                $model->password = Hash::make($model->password);
            };
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }

    public function coverImage()
    {
        return $this->morphOne(Attachment::class,'attachable')->where('media_type','cover');
    }

    /**
     * @param string $token
     */

    public function sendPasswordResetNotification($token)
    {
       
        $this->notify(new CustomerPasswordReset($token));
    }

    public function getNameAttribute($value)
    {
        return $this->title.' '.$this->first_name.' '.(($this->middle_name)?$this->middle_name.' ':'').$this->last_name;
    }

    public function bookings()
    {
        return $this->hasMany(Booking::class);
    }

    public function passengers()
    {
        return $this->hasManyThrough(Passenger::class,Booking::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function reviews()
    {
        return $this->hasMany(Rating::class,'email','email');
    }

    public function hasSubscribed()
    {
        $data = Subscriber::where('email',$this->email)->first();
        return $data ? true:false;
    }
}