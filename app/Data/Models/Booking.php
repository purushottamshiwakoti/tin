<?php
/**
 * Created by PhpStorm.
 * User: nbin
 * Date: 7/12/18
 * Time: 4:49 PM
 */

namespace App\Data\Models;


use App\Data\Services\Payments\PayableInterface;
use App\Data\Traits\ListableRepoTrait;
use Illuminate\Database\Eloquent\Model;
use Request;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Input;

class Booking extends Model implements PayableInterface
{
//    use ListableRepoTrait;

    protected $dates = [
        'start_date',
        'finish_date',
        'cancelled_at'
    ];

    public $settingOptions = [
        'showActions'=>true,
        'editable'=>false,
        'deletable'=>false,
        'readable'=>true
    ];

    protected $fillable = [
        'trip_id',
        'trip_name',
        'customer_id',
        'departure_id',
        'start_date',
        'finish_date',
        'price',
        'total_price',
        'passenger_count',
        'special_request',
        'visit_source',
        'booking_hash',
        'status',
        'is_lead',
        'referral_source',
        'cancel_requested_at',
        'customer_remarks',
        'cancelled_at',
        'ip',
        'hotel_category',
        'tour_starting',
        'estimated_day',
    ];
    public $indexColumns = [
        // 'trip.trip_code',
        'trip.title',
        'customer.first_name',
        'total_price',
        // 'transaction.status',
        // 'transaction.gateway',
        'passenger_count'
    ];



    public static function boot()
    {
        static::creating(function($model)
        {
            // $model->booking_hash = Crypt::encrypt(now().'-'.$model->trip_id.($model->departure_id?'-'.$model->departure_id:''));
            $model->booking_hash = Crypt::encrypt(now().'-'.$model->trip_id);
            if($model->departure_id)
            {
                $departure = FixedDeparture::find($model->departure_id);
                $model->start_date = $departure->start_date;
                $model->finish_date = $departure->finish_date;
                $model->price = $departure->price;
                $model->total_price = $departure->cost_price * intval($model->passenger_count);
            }else{
                $trip = Trip::find($model->trip_id);
                $model->start_date = Request::get('start_date');
                $model->finish_date = Request::get('start_date');
                $model->price = $trip->price;
                $model->total_price = $trip->price * intval($model->passenger_count);
            }


        });

        static::saving(function($model){
            if($model->departure_id)
            {
                $departure = FixedDeparture::find($model->departure_id);
                $model->total_price = $departure->cost_price * intval($model->passenger_count);
            }else{
                $trip = Trip::find($model->trip_id);
                $model->total_price = $trip->price * intval($model->passenger_count);
            }
        });
        parent::boot(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $value
     * @return mixed
     */
    public function getTripCodeAttribute($value)
    {

        return isset($this->departure)?$this->departure->trip_code:$this->trip->trip_code;
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function passengers()
    {
        return $this->hasMany(Passenger::class,'booking_id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function bookingExtensions()
    {
        return $this->hasMany(BookingExtension::class);
    }

    public function getCustomerNameAttribute($value)
    {
        return $this->customer->name;
    }

    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function trip()
    {
        return $this->belongsTo(Trip::class,'trip_id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function departure()
    {
        return $this->belongsTo(FixedDeparture::class,'departure_id');
    }

    /**
     * @return Model|\Illuminate\Database\Eloquent\Relations\HasMany|null|object
     */
    public function leadTraveller()
    {
        if($traveller = $this->passengers()->where('is_lead',1)->first())
        {
            return $traveller;
        }
        return $this->passengers()->first();
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function addOns()
    {
        return $this->hasMany(BookingAddOn::class);
    }


    public function getTotalPrice()
    {
        return $this->total_price;
    }

    public function getMorphKey()
    {
        return 'booking';
    }

    public function getPrimaryKey()
    {
        return $this->id;

    }

    public function transaction()
    {
        return $this->morphOne(Transaction::class, 'payable');

    }
    public function cancelRequestedPassengers()
    {
        return $this->passengers()->cancelRequested();
    }

    public function onlyCancelRequestedPassengers()
    {
        return $this->passengers()->onlyCancelRequested();
    }

    public function cancelledPassengers()
    {
        return $this->passengers()->cancelled();
    }

    public function getHasActivePassengersAttribute()
    {
        return $this->passengers->count()>$this->cancelledPassengers->count()?true:false;
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphMany
     */
    public function cancelRequests()
    {
        return $this->morphMany(ExtraValue::class,'addable')->where('type','cancel_requests');
    }

    public function getCanCancelAttribute($value)
    {
//        echo $this->departure_date;exit;
        return $this->start_date>now()?true:false;
    }
}